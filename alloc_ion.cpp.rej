--- alloc_ion.cpp
+++ alloc_ion.cpp
@@ -35,19 +35,70 @@
 #include <linux/ion.h>
 #include <ion/ion.h>
 
-int alloc_backend_alloc(alloc_device_t* dev, size_t size, int usage, buffer_handle_t* pHandle)
+
+static ion_user_handle_t alloc_from_ion_heap(int ion_fd, size_t size, unsigned int heap_mask,
+		unsigned int flags, int *min_pgsz)
 {
-	private_module_t* m = reinterpret_cast<private_module_t*>(dev->common.module);
-	ion_user_handle_t ion_hnd;
-	unsigned char *cpu_ptr = NULL;
-	int shared_fd;
+	ion_user_handle_t ion_hnd = ION_INVALID_HANDLE;
 	int ret;
+
+	if ((ion_fd < 0) || (size <= 0) || (heap_mask == 0) || (min_pgsz == NULL))
+		return ION_INVALID_HANDLE;
+
+	ret = ion_alloc(ion_fd, size, 0, heap_mask, flags, &ion_hnd);
+	if (ret != 0)
+	{
+		/* If everything else failed try system heap */
+		flags = 0; /* Fallback option flags are not longer valid */
+		ion_alloc(ion_fd, size, 0, ION_HEAP_SYSTEM_MASK, flags, &ion_hnd);
+	}
+
+	if (ion_hnd > ION_INVALID_HANDLE)
+	{
+		switch (heap_mask)
+		{
+		case ION_HEAP_SYSTEM_MASK:
+			*min_pgsz = SZ_4K;
+			break;
+		case ION_HEAP_SYSTEM_CONTIG_MASK:
+		case ION_HEAP_CARVEOUT_MASK:
+#ifdef ION_HEAP_TYPE_DMA_MASK
+		case ION_HEAP_TYPE_DMA_MASK:
+#endif
+			*min_pgsz = size;
+			break;
+#ifdef ION_HEAP_CHUNK_MASK
+		/* NOTE: if have this heap make sure your ION chunk size is 2M*/
+		case ION_HEAP_CHUNK_MASK:
+			*min_pgsz = SZ_2M;
+			break;
+#endif
+#ifdef ION_HEAP_COMPOUND_PAGE_MASK
+		case ION_HEAP_COMPOUND_PAGE_MASK:
+			*min_pgsz = SZ_2M;
+			break;
+#endif
+		/* If have customized heap please set the suitable pg type according to
+		 * the customized ION implementation
+		 */
+#ifdef ION_HEAP_CUSTOM_MASK
+		case ION_HEAP_CUSTOM_MASK:
+			*min_pgsz = SZ_4K;
+			break;
+#endif
+		default:
+			*min_pgsz = SZ_4K;
+			break;
+		}
+	}
+
+	return ion_hnd;
+}
+
+unsigned int pick_ion_heap(int usage)
+{
 	unsigned int heap_mask;
-	int ion_flags = 0;
-	static int support_protected = 1; /* initially, assume we support protected memory */
-	int lock_state = 0;
 
-	/* Select heap type based on usage hints */
 	if(usage & GRALLOC_USAGE_PROTECTED)
 	{
 #if defined(ION_HEAP_SECURE_MASK)
@@ -57,20 +108,71 @@
 		return -1;
 #endif
 	}
+#if defined(ION_HEAP_TYPE_COMPOUND_PAGE_MASK) && GRALLOC_USE_ION_COMPOUND_PAGE_HEAP
+	else if(usage & (GRALLOC_USAGE_HW_FB | GRALLOC_USAGE_HW_COMPOSER))
+	{
+		heap_mask = ION_HEAP_TYPE_COMPOUND_PAGE_MASK;
+	}
+#elif defined(ION_HEAP_TYPE_DMA_MASK) && GRALLOC_USE_ION_DMA_HEAP
+	else if(usage & (GRALLOC_USAGE_HW_FB | GRALLOC_USAGE_HW_COMPOSER))
+	{
+		heap_mask = ION_HEAP_TYPE_DMA_MASK;
+	}
+#endif
 	else
 	{
 		heap_mask = ION_HEAP_SYSTEM_MASK;
 	}
 
-	if ( (usage & GRALLOC_USAGE_SW_READ_MASK) == GRALLOC_USAGE_SW_READ_OFTEN )
+	return heap_mask;
+}
+
+void set_ion_flags(unsigned int heap_mask, int usage, unsigned int *priv_heap_flag, int *ion_flags)
+{
+	if (priv_heap_flag)
+	{
+#if defined(ION_HEAP_TYPE_DMA_MASK) && GRALLOC_USE_ION_DMA_HEAP
+		if (heap_mask == ION_HEAP_TYPE_DMA_MASK)
+		{
+			*priv_heap_flag = private_handle_t::PRIV_FLAGS_USES_ION_DMA_HEAP;
+		}
+#endif
+	}
+
+	if (ion_flags)
 	{
-		ion_flags = ION_FLAG_CACHED | ION_FLAG_CACHED_NEEDS_SYNC;
+#if defined(ION_HEAP_TYPE_DMA_MASK) && GRALLOC_USE_ION_DMA_HEAP
+		if(heap_mask != ION_HEAP_TYPE_DMA_MASK)
+		{
+#endif
+			if ( (usage & GRALLOC_USAGE_SW_READ_MASK) == GRALLOC_USAGE_SW_READ_OFTEN )
+			{
+				*ion_flags = ION_FLAG_CACHED | ION_FLAG_CACHED_NEEDS_SYNC;
+			}
+#if defined(ION_HEAP_TYPE_DMA_MASK) && GRALLOC_USE_ION_DMA_HEAP
+		}
+#endif
 	}
+}
+
+int alloc_backend_alloc(alloc_device_t* dev, size_t size, int usage, buffer_handle_t* pHandle)
+{
+	private_module_t* m = reinterpret_cast<private_module_t*>(dev->common.module);
+	ion_user_handle_t ion_hnd;
+	unsigned char *cpu_ptr = NULL;
+	int shared_fd;
+	int ret;
+	unsigned int heap_mask, priv_heap_flag = 0;
+	int ion_flags = 0;
+	static int support_protected = 1; /* initially, assume we support protected memory */
+	int lock_state = 0;
+	int min_pgsz = 0;
 
-	ret = ion_alloc(m->ion_client, size, 0, heap_mask,
-	                ion_flags, &ion_hnd );
+	heap_mask = pick_ion_heap(usage);
+	set_ion_flags(heap_mask, usage, &priv_heap_flag, &ion_flags);
 
-	if ( ret != 0) 
+	ion_hnd = alloc_from_ion_heap(m->ion_client, size, heap_mask, ion_flags, &min_pgsz);
+	if (ion_hnd <= ION_INVALID_HANDLE)
 	{
 		AERR("Failed to ion_alloc from ion_client:%d", m->ion_client);
 		return -1;
